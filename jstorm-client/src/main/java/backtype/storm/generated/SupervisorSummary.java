/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SupervisorSummary implements org.apache.thrift.TBase<SupervisorSummary, SupervisorSummary._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisorSummary");

  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUPERVISOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisor_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_workers", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_USED_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_used_workers", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("num_cpu", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_USED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("num_used_cpu", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("num_mem", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NUM_USED_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("num_used_mem", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_DISK_FIELD_DESC = new org.apache.thrift.protocol.TField("num_disk", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NUM_USED_DISK_FIELD_DESC = new org.apache.thrift.protocol.TField("num_used_disk", org.apache.thrift.protocol.TType.I32, (short)11);

  private String host; // required
  private String supervisor_id; // required
  private int uptime_secs; // required
  private int num_workers; // required
  private int num_used_workers; // required
  private int num_cpu; // required
  private int num_used_cpu; // required
  private int num_mem; // required
  private int num_used_mem; // required
  private int num_disk; // required
  private int num_used_disk; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST((short)1, "host"),
    SUPERVISOR_ID((short)2, "supervisor_id"),
    UPTIME_SECS((short)3, "uptime_secs"),
    NUM_WORKERS((short)4, "num_workers"),
    NUM_USED_WORKERS((short)5, "num_used_workers"),
    NUM_CPU((short)6, "num_cpu"),
    NUM_USED_CPU((short)7, "num_used_cpu"),
    NUM_MEM((short)8, "num_mem"),
    NUM_USED_MEM((short)9, "num_used_mem"),
    NUM_DISK((short)10, "num_disk"),
    NUM_USED_DISK((short)11, "num_used_disk");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST
          return HOST;
        case 2: // SUPERVISOR_ID
          return SUPERVISOR_ID;
        case 3: // UPTIME_SECS
          return UPTIME_SECS;
        case 4: // NUM_WORKERS
          return NUM_WORKERS;
        case 5: // NUM_USED_WORKERS
          return NUM_USED_WORKERS;
        case 6: // NUM_CPU
          return NUM_CPU;
        case 7: // NUM_USED_CPU
          return NUM_USED_CPU;
        case 8: // NUM_MEM
          return NUM_MEM;
        case 9: // NUM_USED_MEM
          return NUM_USED_MEM;
        case 10: // NUM_DISK
          return NUM_DISK;
        case 11: // NUM_USED_DISK
          return NUM_USED_DISK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPTIME_SECS_ISSET_ID = 0;
  private static final int __NUM_WORKERS_ISSET_ID = 1;
  private static final int __NUM_USED_WORKERS_ISSET_ID = 2;
  private static final int __NUM_CPU_ISSET_ID = 3;
  private static final int __NUM_USED_CPU_ISSET_ID = 4;
  private static final int __NUM_MEM_ISSET_ID = 5;
  private static final int __NUM_USED_MEM_ISSET_ID = 6;
  private static final int __NUM_DISK_ISSET_ID = 7;
  private static final int __NUM_USED_DISK_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERVISOR_ID, new org.apache.thrift.meta_data.FieldMetaData("supervisor_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_workers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_USED_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_used_workers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_CPU, new org.apache.thrift.meta_data.FieldMetaData("num_cpu", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_USED_CPU, new org.apache.thrift.meta_data.FieldMetaData("num_used_cpu", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_MEM, new org.apache.thrift.meta_data.FieldMetaData("num_mem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_USED_MEM, new org.apache.thrift.meta_data.FieldMetaData("num_used_mem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_DISK, new org.apache.thrift.meta_data.FieldMetaData("num_disk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_USED_DISK, new org.apache.thrift.meta_data.FieldMetaData("num_used_disk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisorSummary.class, metaDataMap);
  }

  public SupervisorSummary() {
  }

  public SupervisorSummary(
    String host,
    String supervisor_id,
    int uptime_secs,
    int num_workers,
    int num_used_workers,
    int num_cpu,
    int num_used_cpu,
    int num_mem,
    int num_used_mem,
    int num_disk,
    int num_used_disk)
  {
    this();
    this.host = host;
    this.supervisor_id = supervisor_id;
    this.uptime_secs = uptime_secs;
    set_uptime_secs_isSet(true);
    this.num_workers = num_workers;
    set_num_workers_isSet(true);
    this.num_used_workers = num_used_workers;
    set_num_used_workers_isSet(true);
    this.num_cpu = num_cpu;
    set_num_cpu_isSet(true);
    this.num_used_cpu = num_used_cpu;
    set_num_used_cpu_isSet(true);
    this.num_mem = num_mem;
    set_num_mem_isSet(true);
    this.num_used_mem = num_used_mem;
    set_num_used_mem_isSet(true);
    this.num_disk = num_disk;
    set_num_disk_isSet(true);
    this.num_used_disk = num_used_disk;
    set_num_used_disk_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisorSummary(SupervisorSummary other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.is_set_host()) {
      this.host = other.host;
    }
    if (other.is_set_supervisor_id()) {
      this.supervisor_id = other.supervisor_id;
    }
    this.uptime_secs = other.uptime_secs;
    this.num_workers = other.num_workers;
    this.num_used_workers = other.num_used_workers;
    this.num_cpu = other.num_cpu;
    this.num_used_cpu = other.num_used_cpu;
    this.num_mem = other.num_mem;
    this.num_used_mem = other.num_used_mem;
    this.num_disk = other.num_disk;
    this.num_used_disk = other.num_used_disk;
  }

  public SupervisorSummary deepCopy() {
    return new SupervisorSummary(this);
  }

  @Override
  public void clear() {
    this.host = null;
    this.supervisor_id = null;
    set_uptime_secs_isSet(false);
    this.uptime_secs = 0;
    set_num_workers_isSet(false);
    this.num_workers = 0;
    set_num_used_workers_isSet(false);
    this.num_used_workers = 0;
    set_num_cpu_isSet(false);
    this.num_cpu = 0;
    set_num_used_cpu_isSet(false);
    this.num_used_cpu = 0;
    set_num_mem_isSet(false);
    this.num_mem = 0;
    set_num_used_mem_isSet(false);
    this.num_used_mem = 0;
    set_num_disk_isSet(false);
    this.num_disk = 0;
    set_num_used_disk_isSet(false);
    this.num_used_disk = 0;
  }

  public String get_host() {
    return this.host;
  }

  public void set_host(String host) {
    this.host = host;
  }

  public void unset_host() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean is_set_host() {
    return this.host != null;
  }

  public void set_host_isSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public String get_supervisor_id() {
    return this.supervisor_id;
  }

  public void set_supervisor_id(String supervisor_id) {
    this.supervisor_id = supervisor_id;
  }

  public void unset_supervisor_id() {
    this.supervisor_id = null;
  }

  /** Returns true if field supervisor_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_supervisor_id() {
    return this.supervisor_id != null;
  }

  public void set_supervisor_id_isSet(boolean value) {
    if (!value) {
      this.supervisor_id = null;
    }
  }

  public int get_uptime_secs() {
    return this.uptime_secs;
  }

  public void set_uptime_secs(int uptime_secs) {
    this.uptime_secs = uptime_secs;
    set_uptime_secs_isSet(true);
  }

  public void unset_uptime_secs() {
    __isset_bit_vector.clear(__UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean is_set_uptime_secs() {
    return __isset_bit_vector.get(__UPTIME_SECS_ISSET_ID);
  }

  public void set_uptime_secs_isSet(boolean value) {
    __isset_bit_vector.set(__UPTIME_SECS_ISSET_ID, value);
  }

  public int get_num_workers() {
    return this.num_workers;
  }

  public void set_num_workers(int num_workers) {
    this.num_workers = num_workers;
    set_num_workers_isSet(true);
  }

  public void unset_num_workers() {
    __isset_bit_vector.clear(__NUM_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_workers is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_workers() {
    return __isset_bit_vector.get(__NUM_WORKERS_ISSET_ID);
  }

  public void set_num_workers_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_WORKERS_ISSET_ID, value);
  }

  public int get_num_used_workers() {
    return this.num_used_workers;
  }

  public void set_num_used_workers(int num_used_workers) {
    this.num_used_workers = num_used_workers;
    set_num_used_workers_isSet(true);
  }

  public void unset_num_used_workers() {
    __isset_bit_vector.clear(__NUM_USED_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_used_workers is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_used_workers() {
    return __isset_bit_vector.get(__NUM_USED_WORKERS_ISSET_ID);
  }

  public void set_num_used_workers_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_USED_WORKERS_ISSET_ID, value);
  }

  public int get_num_cpu() {
    return this.num_cpu;
  }

  public void set_num_cpu(int num_cpu) {
    this.num_cpu = num_cpu;
    set_num_cpu_isSet(true);
  }

  public void unset_num_cpu() {
    __isset_bit_vector.clear(__NUM_CPU_ISSET_ID);
  }

  /** Returns true if field num_cpu is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_cpu() {
    return __isset_bit_vector.get(__NUM_CPU_ISSET_ID);
  }

  public void set_num_cpu_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_CPU_ISSET_ID, value);
  }

  public int get_num_used_cpu() {
    return this.num_used_cpu;
  }

  public void set_num_used_cpu(int num_used_cpu) {
    this.num_used_cpu = num_used_cpu;
    set_num_used_cpu_isSet(true);
  }

  public void unset_num_used_cpu() {
    __isset_bit_vector.clear(__NUM_USED_CPU_ISSET_ID);
  }

  /** Returns true if field num_used_cpu is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_used_cpu() {
    return __isset_bit_vector.get(__NUM_USED_CPU_ISSET_ID);
  }

  public void set_num_used_cpu_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_USED_CPU_ISSET_ID, value);
  }

  public int get_num_mem() {
    return this.num_mem;
  }

  public void set_num_mem(int num_mem) {
    this.num_mem = num_mem;
    set_num_mem_isSet(true);
  }

  public void unset_num_mem() {
    __isset_bit_vector.clear(__NUM_MEM_ISSET_ID);
  }

  /** Returns true if field num_mem is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_mem() {
    return __isset_bit_vector.get(__NUM_MEM_ISSET_ID);
  }

  public void set_num_mem_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_MEM_ISSET_ID, value);
  }

  public int get_num_used_mem() {
    return this.num_used_mem;
  }

  public void set_num_used_mem(int num_used_mem) {
    this.num_used_mem = num_used_mem;
    set_num_used_mem_isSet(true);
  }

  public void unset_num_used_mem() {
    __isset_bit_vector.clear(__NUM_USED_MEM_ISSET_ID);
  }

  /** Returns true if field num_used_mem is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_used_mem() {
    return __isset_bit_vector.get(__NUM_USED_MEM_ISSET_ID);
  }

  public void set_num_used_mem_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_USED_MEM_ISSET_ID, value);
  }

  public int get_num_disk() {
    return this.num_disk;
  }

  public void set_num_disk(int num_disk) {
    this.num_disk = num_disk;
    set_num_disk_isSet(true);
  }

  public void unset_num_disk() {
    __isset_bit_vector.clear(__NUM_DISK_ISSET_ID);
  }

  /** Returns true if field num_disk is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_disk() {
    return __isset_bit_vector.get(__NUM_DISK_ISSET_ID);
  }

  public void set_num_disk_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_DISK_ISSET_ID, value);
  }

  public int get_num_used_disk() {
    return this.num_used_disk;
  }

  public void set_num_used_disk(int num_used_disk) {
    this.num_used_disk = num_used_disk;
    set_num_used_disk_isSet(true);
  }

  public void unset_num_used_disk() {
    __isset_bit_vector.clear(__NUM_USED_DISK_ISSET_ID);
  }

  /** Returns true if field num_used_disk is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_used_disk() {
    return __isset_bit_vector.get(__NUM_USED_DISK_ISSET_ID);
  }

  public void set_num_used_disk_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_USED_DISK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST:
      if (value == null) {
        unset_host();
      } else {
        set_host((String)value);
      }
      break;

    case SUPERVISOR_ID:
      if (value == null) {
        unset_supervisor_id();
      } else {
        set_supervisor_id((String)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unset_uptime_secs();
      } else {
        set_uptime_secs((Integer)value);
      }
      break;

    case NUM_WORKERS:
      if (value == null) {
        unset_num_workers();
      } else {
        set_num_workers((Integer)value);
      }
      break;

    case NUM_USED_WORKERS:
      if (value == null) {
        unset_num_used_workers();
      } else {
        set_num_used_workers((Integer)value);
      }
      break;

    case NUM_CPU:
      if (value == null) {
        unset_num_cpu();
      } else {
        set_num_cpu((Integer)value);
      }
      break;

    case NUM_USED_CPU:
      if (value == null) {
        unset_num_used_cpu();
      } else {
        set_num_used_cpu((Integer)value);
      }
      break;

    case NUM_MEM:
      if (value == null) {
        unset_num_mem();
      } else {
        set_num_mem((Integer)value);
      }
      break;

    case NUM_USED_MEM:
      if (value == null) {
        unset_num_used_mem();
      } else {
        set_num_used_mem((Integer)value);
      }
      break;

    case NUM_DISK:
      if (value == null) {
        unset_num_disk();
      } else {
        set_num_disk((Integer)value);
      }
      break;

    case NUM_USED_DISK:
      if (value == null) {
        unset_num_used_disk();
      } else {
        set_num_used_disk((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST:
      return get_host();

    case SUPERVISOR_ID:
      return get_supervisor_id();

    case UPTIME_SECS:
      return Integer.valueOf(get_uptime_secs());

    case NUM_WORKERS:
      return Integer.valueOf(get_num_workers());

    case NUM_USED_WORKERS:
      return Integer.valueOf(get_num_used_workers());

    case NUM_CPU:
      return Integer.valueOf(get_num_cpu());

    case NUM_USED_CPU:
      return Integer.valueOf(get_num_used_cpu());

    case NUM_MEM:
      return Integer.valueOf(get_num_mem());

    case NUM_USED_MEM:
      return Integer.valueOf(get_num_used_mem());

    case NUM_DISK:
      return Integer.valueOf(get_num_disk());

    case NUM_USED_DISK:
      return Integer.valueOf(get_num_used_disk());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST:
      return is_set_host();
    case SUPERVISOR_ID:
      return is_set_supervisor_id();
    case UPTIME_SECS:
      return is_set_uptime_secs();
    case NUM_WORKERS:
      return is_set_num_workers();
    case NUM_USED_WORKERS:
      return is_set_num_used_workers();
    case NUM_CPU:
      return is_set_num_cpu();
    case NUM_USED_CPU:
      return is_set_num_used_cpu();
    case NUM_MEM:
      return is_set_num_mem();
    case NUM_USED_MEM:
      return is_set_num_used_mem();
    case NUM_DISK:
      return is_set_num_disk();
    case NUM_USED_DISK:
      return is_set_num_used_disk();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisorSummary)
      return this.equals((SupervisorSummary)that);
    return false;
  }

  public boolean equals(SupervisorSummary that) {
    if (that == null)
      return false;

    boolean this_present_host = true && this.is_set_host();
    boolean that_present_host = true && that.is_set_host();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_supervisor_id = true && this.is_set_supervisor_id();
    boolean that_present_supervisor_id = true && that.is_set_supervisor_id();
    if (this_present_supervisor_id || that_present_supervisor_id) {
      if (!(this_present_supervisor_id && that_present_supervisor_id))
        return false;
      if (!this.supervisor_id.equals(that.supervisor_id))
        return false;
    }

    boolean this_present_uptime_secs = true;
    boolean that_present_uptime_secs = true;
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_num_workers = true;
    boolean that_present_num_workers = true;
    if (this_present_num_workers || that_present_num_workers) {
      if (!(this_present_num_workers && that_present_num_workers))
        return false;
      if (this.num_workers != that.num_workers)
        return false;
    }

    boolean this_present_num_used_workers = true;
    boolean that_present_num_used_workers = true;
    if (this_present_num_used_workers || that_present_num_used_workers) {
      if (!(this_present_num_used_workers && that_present_num_used_workers))
        return false;
      if (this.num_used_workers != that.num_used_workers)
        return false;
    }

    boolean this_present_num_cpu = true;
    boolean that_present_num_cpu = true;
    if (this_present_num_cpu || that_present_num_cpu) {
      if (!(this_present_num_cpu && that_present_num_cpu))
        return false;
      if (this.num_cpu != that.num_cpu)
        return false;
    }

    boolean this_present_num_used_cpu = true;
    boolean that_present_num_used_cpu = true;
    if (this_present_num_used_cpu || that_present_num_used_cpu) {
      if (!(this_present_num_used_cpu && that_present_num_used_cpu))
        return false;
      if (this.num_used_cpu != that.num_used_cpu)
        return false;
    }

    boolean this_present_num_mem = true;
    boolean that_present_num_mem = true;
    if (this_present_num_mem || that_present_num_mem) {
      if (!(this_present_num_mem && that_present_num_mem))
        return false;
      if (this.num_mem != that.num_mem)
        return false;
    }

    boolean this_present_num_used_mem = true;
    boolean that_present_num_used_mem = true;
    if (this_present_num_used_mem || that_present_num_used_mem) {
      if (!(this_present_num_used_mem && that_present_num_used_mem))
        return false;
      if (this.num_used_mem != that.num_used_mem)
        return false;
    }

    boolean this_present_num_disk = true;
    boolean that_present_num_disk = true;
    if (this_present_num_disk || that_present_num_disk) {
      if (!(this_present_num_disk && that_present_num_disk))
        return false;
      if (this.num_disk != that.num_disk)
        return false;
    }

    boolean this_present_num_used_disk = true;
    boolean that_present_num_used_disk = true;
    if (this_present_num_used_disk || that_present_num_used_disk) {
      if (!(this_present_num_used_disk && that_present_num_used_disk))
        return false;
      if (this.num_used_disk != that.num_used_disk)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_host = true && (is_set_host());
    builder.append(present_host);
    if (present_host)
      builder.append(host);

    boolean present_supervisor_id = true && (is_set_supervisor_id());
    builder.append(present_supervisor_id);
    if (present_supervisor_id)
      builder.append(supervisor_id);

    boolean present_uptime_secs = true;
    builder.append(present_uptime_secs);
    if (present_uptime_secs)
      builder.append(uptime_secs);

    boolean present_num_workers = true;
    builder.append(present_num_workers);
    if (present_num_workers)
      builder.append(num_workers);

    boolean present_num_used_workers = true;
    builder.append(present_num_used_workers);
    if (present_num_used_workers)
      builder.append(num_used_workers);

    boolean present_num_cpu = true;
    builder.append(present_num_cpu);
    if (present_num_cpu)
      builder.append(num_cpu);

    boolean present_num_used_cpu = true;
    builder.append(present_num_used_cpu);
    if (present_num_used_cpu)
      builder.append(num_used_cpu);

    boolean present_num_mem = true;
    builder.append(present_num_mem);
    if (present_num_mem)
      builder.append(num_mem);

    boolean present_num_used_mem = true;
    builder.append(present_num_used_mem);
    if (present_num_used_mem)
      builder.append(num_used_mem);

    boolean present_num_disk = true;
    builder.append(present_num_disk);
    if (present_num_disk)
      builder.append(num_disk);

    boolean present_num_used_disk = true;
    builder.append(present_num_used_disk);
    if (present_num_used_disk)
      builder.append(num_used_disk);

    return builder.toHashCode();
  }

  public int compareTo(SupervisorSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SupervisorSummary typedOther = (SupervisorSummary)other;

    lastComparison = Boolean.valueOf(is_set_host()).compareTo(typedOther.is_set_host());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_host()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_supervisor_id()).compareTo(typedOther.is_set_supervisor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_supervisor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisor_id, typedOther.supervisor_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_uptime_secs()).compareTo(typedOther.is_set_uptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_uptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, typedOther.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_workers()).compareTo(typedOther.is_set_num_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_workers, typedOther.num_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_used_workers()).compareTo(typedOther.is_set_num_used_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_used_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_used_workers, typedOther.num_used_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_cpu()).compareTo(typedOther.is_set_num_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_cpu, typedOther.num_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_used_cpu()).compareTo(typedOther.is_set_num_used_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_used_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_used_cpu, typedOther.num_used_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_mem()).compareTo(typedOther.is_set_num_mem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_mem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_mem, typedOther.num_mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_used_mem()).compareTo(typedOther.is_set_num_used_mem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_used_mem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_used_mem, typedOther.num_used_mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_disk()).compareTo(typedOther.is_set_num_disk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_disk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_disk, typedOther.num_disk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_used_disk()).compareTo(typedOther.is_set_num_used_disk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_used_disk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_used_disk, typedOther.num_used_disk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HOST
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.host = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUPERVISOR_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.supervisor_id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // UPTIME_SECS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.uptime_secs = iprot.readI32();
            set_uptime_secs_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // NUM_WORKERS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_workers = iprot.readI32();
            set_num_workers_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // NUM_USED_WORKERS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_used_workers = iprot.readI32();
            set_num_used_workers_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // NUM_CPU
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_cpu = iprot.readI32();
            set_num_cpu_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // NUM_USED_CPU
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_used_cpu = iprot.readI32();
            set_num_used_cpu_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // NUM_MEM
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_mem = iprot.readI32();
            set_num_mem_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // NUM_USED_MEM
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_used_mem = iprot.readI32();
            set_num_used_mem_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // NUM_DISK
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_disk = iprot.readI32();
            set_num_disk_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // NUM_USED_DISK
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_used_disk = iprot.readI32();
            set_num_used_disk_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      oprot.writeString(this.host);
      oprot.writeFieldEnd();
    }
    if (this.supervisor_id != null) {
      oprot.writeFieldBegin(SUPERVISOR_ID_FIELD_DESC);
      oprot.writeString(this.supervisor_id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
    oprot.writeI32(this.uptime_secs);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
    oprot.writeI32(this.num_workers);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_USED_WORKERS_FIELD_DESC);
    oprot.writeI32(this.num_used_workers);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_CPU_FIELD_DESC);
    oprot.writeI32(this.num_cpu);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_USED_CPU_FIELD_DESC);
    oprot.writeI32(this.num_used_cpu);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_MEM_FIELD_DESC);
    oprot.writeI32(this.num_mem);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_USED_MEM_FIELD_DESC);
    oprot.writeI32(this.num_used_mem);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_DISK_FIELD_DESC);
    oprot.writeI32(this.num_disk);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_USED_DISK_FIELD_DESC);
    oprot.writeI32(this.num_used_disk);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SupervisorSummary(");
    boolean first = true;

    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supervisor_id:");
    if (this.supervisor_id == null) {
      sb.append("null");
    } else {
      sb.append(this.supervisor_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uptime_secs:");
    sb.append(this.uptime_secs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_workers:");
    sb.append(this.num_workers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_used_workers:");
    sb.append(this.num_used_workers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_cpu:");
    sb.append(this.num_cpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_used_cpu:");
    sb.append(this.num_used_cpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_mem:");
    sb.append(this.num_mem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_used_mem:");
    sb.append(this.num_used_mem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_disk:");
    sb.append(this.num_disk);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_used_disk:");
    sb.append(this.num_used_disk);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_host()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'host' is unset! Struct:" + toString());
    }

    if (!is_set_supervisor_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'supervisor_id' is unset! Struct:" + toString());
    }

    if (!is_set_uptime_secs()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uptime_secs' is unset! Struct:" + toString());
    }

    if (!is_set_num_workers()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_workers' is unset! Struct:" + toString());
    }

    if (!is_set_num_used_workers()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_used_workers' is unset! Struct:" + toString());
    }

    if (!is_set_num_cpu()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_cpu' is unset! Struct:" + toString());
    }

    if (!is_set_num_used_cpu()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_used_cpu' is unset! Struct:" + toString());
    }

    if (!is_set_num_mem()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_mem' is unset! Struct:" + toString());
    }

    if (!is_set_num_used_mem()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_used_mem' is unset! Struct:" + toString());
    }

    if (!is_set_num_disk()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_disk' is unset! Struct:" + toString());
    }

    if (!is_set_num_used_disk()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_used_disk' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

