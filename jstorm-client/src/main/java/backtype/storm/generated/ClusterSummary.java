/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClusterSummary implements org.apache.thrift7.TBase<ClusterSummary, ClusterSummary._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("ClusterSummary");

  private static final org.apache.thrift7.protocol.TField SUPERVISORS_FIELD_DESC = new org.apache.thrift7.protocol.TField("supervisors", org.apache.thrift7.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift7.protocol.TField NIMBUS_UPTIME_SECS_FIELD_DESC = new org.apache.thrift7.protocol.TField("nimbus_uptime_secs", org.apache.thrift7.protocol.TType.I32, (short)2);
  private static final org.apache.thrift7.protocol.TField TOPOLOGIES_FIELD_DESC = new org.apache.thrift7.protocol.TField("topologies", org.apache.thrift7.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift7.protocol.TField GROUP_TO_TOPOLOGY_FIELD_DESC = new org.apache.thrift7.protocol.TField("groupToTopology", org.apache.thrift7.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift7.protocol.TField GROUP_TO_RESOURCE_FIELD_DESC = new org.apache.thrift7.protocol.TField("groupToResource", org.apache.thrift7.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift7.protocol.TField GROUP_TO_USED_RESOURCE_FIELD_DESC = new org.apache.thrift7.protocol.TField("groupToUsedResource", org.apache.thrift7.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift7.protocol.TField IS_GROUP_MODEL_FIELD_DESC = new org.apache.thrift7.protocol.TField("isGroupModel", org.apache.thrift7.protocol.TType.BOOL, (short)7);

  private List<SupervisorSummary> supervisors; // required
  private int nimbus_uptime_secs; // required
  private List<TopologySummary> topologies; // required
  private Map<String,Map<String,Map<ThriftResourceType,Integer>>> groupToTopology; // required
  private Map<String,Map<ThriftResourceType,Integer>> groupToResource; // required
  private Map<String,Map<ThriftResourceType,Integer>> groupToUsedResource; // required
  private boolean isGroupModel; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
    SUPERVISORS((short)1, "supervisors"),
    NIMBUS_UPTIME_SECS((short)2, "nimbus_uptime_secs"),
    TOPOLOGIES((short)3, "topologies"),
    GROUP_TO_TOPOLOGY((short)4, "groupToTopology"),
    GROUP_TO_RESOURCE((short)5, "groupToResource"),
    GROUP_TO_USED_RESOURCE((short)6, "groupToUsedResource"),
    IS_GROUP_MODEL((short)7, "isGroupModel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUPERVISORS
          return SUPERVISORS;
        case 2: // NIMBUS_UPTIME_SECS
          return NIMBUS_UPTIME_SECS;
        case 3: // TOPOLOGIES
          return TOPOLOGIES;
        case 4: // GROUP_TO_TOPOLOGY
          return GROUP_TO_TOPOLOGY;
        case 5: // GROUP_TO_RESOURCE
          return GROUP_TO_RESOURCE;
        case 6: // GROUP_TO_USED_RESOURCE
          return GROUP_TO_USED_RESOURCE;
        case 7: // IS_GROUP_MODEL
          return IS_GROUP_MODEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NIMBUS_UPTIME_SECS_ISSET_ID = 0;
  private static final int __ISGROUPMODEL_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUPERVISORS, new org.apache.thrift7.meta_data.FieldMetaData("supervisors", org.apache.thrift7.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
            new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, SupervisorSummary.class))));
    tmpMap.put(_Fields.NIMBUS_UPTIME_SECS, new org.apache.thrift7.meta_data.FieldMetaData("nimbus_uptime_secs", org.apache.thrift7.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPOLOGIES, new org.apache.thrift7.meta_data.FieldMetaData("topologies", org.apache.thrift7.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift7.meta_data.ListMetaData(org.apache.thrift7.protocol.TType.LIST, 
            new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, TopologySummary.class))));
    tmpMap.put(_Fields.GROUP_TO_TOPOLOGY, new org.apache.thrift7.meta_data.FieldMetaData("groupToTopology", org.apache.thrift7.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP, 
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING), 
            new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP, 
                new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING), 
                new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP, 
                    new org.apache.thrift7.meta_data.EnumMetaData(org.apache.thrift7.protocol.TType.ENUM, ThriftResourceType.class), 
                    new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I32))))));
    tmpMap.put(_Fields.GROUP_TO_RESOURCE, new org.apache.thrift7.meta_data.FieldMetaData("groupToResource", org.apache.thrift7.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP, 
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING), 
            new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP, 
                new org.apache.thrift7.meta_data.EnumMetaData(org.apache.thrift7.protocol.TType.ENUM, ThriftResourceType.class), 
                new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I32)))));
    tmpMap.put(_Fields.GROUP_TO_USED_RESOURCE, new org.apache.thrift7.meta_data.FieldMetaData("groupToUsedResource", org.apache.thrift7.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP, 
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING), 
            new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP, 
                new org.apache.thrift7.meta_data.EnumMetaData(org.apache.thrift7.protocol.TType.ENUM, ThriftResourceType.class), 
                new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.I32)))));
    tmpMap.put(_Fields.IS_GROUP_MODEL, new org.apache.thrift7.meta_data.FieldMetaData("isGroupModel", org.apache.thrift7.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(ClusterSummary.class, metaDataMap);
  }

  public ClusterSummary() {
  }

  public ClusterSummary(
    List<SupervisorSummary> supervisors,
    int nimbus_uptime_secs,
    List<TopologySummary> topologies,
    Map<String,Map<String,Map<ThriftResourceType,Integer>>> groupToTopology,
    Map<String,Map<ThriftResourceType,Integer>> groupToResource,
    Map<String,Map<ThriftResourceType,Integer>> groupToUsedResource,
    boolean isGroupModel)
  {
    this();
    this.supervisors = supervisors;
    this.nimbus_uptime_secs = nimbus_uptime_secs;
    set_nimbus_uptime_secs_isSet(true);
    this.topologies = topologies;
    this.groupToTopology = groupToTopology;
    this.groupToResource = groupToResource;
    this.groupToUsedResource = groupToUsedResource;
    this.isGroupModel = isGroupModel;
    set_isGroupModel_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClusterSummary(ClusterSummary other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.is_set_supervisors()) {
      List<SupervisorSummary> __this__supervisors = new ArrayList<SupervisorSummary>();
      for (SupervisorSummary other_element : other.supervisors) {
        __this__supervisors.add(new SupervisorSummary(other_element));
      }
      this.supervisors = __this__supervisors;
    }
    this.nimbus_uptime_secs = other.nimbus_uptime_secs;
    if (other.is_set_topologies()) {
      List<TopologySummary> __this__topologies = new ArrayList<TopologySummary>();
      for (TopologySummary other_element : other.topologies) {
        __this__topologies.add(new TopologySummary(other_element));
      }
      this.topologies = __this__topologies;
    }
    if (other.is_set_groupToTopology()) {
      Map<String,Map<String,Map<ThriftResourceType,Integer>>> __this__groupToTopology = new HashMap<String,Map<String,Map<ThriftResourceType,Integer>>>();
      for (Map.Entry<String, Map<String,Map<ThriftResourceType,Integer>>> other_element : other.groupToTopology.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Map<ThriftResourceType,Integer>> other_element_value = other_element.getValue();

        String __this__groupToTopology_copy_key = other_element_key;

        Map<String,Map<ThriftResourceType,Integer>> __this__groupToTopology_copy_value = new HashMap<String,Map<ThriftResourceType,Integer>>();
        for (Map.Entry<String, Map<ThriftResourceType,Integer>> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Map<ThriftResourceType,Integer> other_element_value_element_value = other_element_value_element.getValue();

          String __this__groupToTopology_copy_value_copy_key = other_element_value_element_key;

          Map<ThriftResourceType,Integer> __this__groupToTopology_copy_value_copy_value = new HashMap<ThriftResourceType,Integer>();
          for (Map.Entry<ThriftResourceType, Integer> other_element_value_element_value_element : other_element_value_element_value.entrySet()) {

            ThriftResourceType other_element_value_element_value_element_key = other_element_value_element_value_element.getKey();
            Integer other_element_value_element_value_element_value = other_element_value_element_value_element.getValue();

            ThriftResourceType __this__groupToTopology_copy_value_copy_value_copy_key = other_element_value_element_value_element_key;

            Integer __this__groupToTopology_copy_value_copy_value_copy_value = other_element_value_element_value_element_value;

            __this__groupToTopology_copy_value_copy_value.put(__this__groupToTopology_copy_value_copy_value_copy_key, __this__groupToTopology_copy_value_copy_value_copy_value);
          }

          __this__groupToTopology_copy_value.put(__this__groupToTopology_copy_value_copy_key, __this__groupToTopology_copy_value_copy_value);
        }

        __this__groupToTopology.put(__this__groupToTopology_copy_key, __this__groupToTopology_copy_value);
      }
      this.groupToTopology = __this__groupToTopology;
    }
    if (other.is_set_groupToResource()) {
      Map<String,Map<ThriftResourceType,Integer>> __this__groupToResource = new HashMap<String,Map<ThriftResourceType,Integer>>();
      for (Map.Entry<String, Map<ThriftResourceType,Integer>> other_element : other.groupToResource.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<ThriftResourceType,Integer> other_element_value = other_element.getValue();

        String __this__groupToResource_copy_key = other_element_key;

        Map<ThriftResourceType,Integer> __this__groupToResource_copy_value = new HashMap<ThriftResourceType,Integer>();
        for (Map.Entry<ThriftResourceType, Integer> other_element_value_element : other_element_value.entrySet()) {

          ThriftResourceType other_element_value_element_key = other_element_value_element.getKey();
          Integer other_element_value_element_value = other_element_value_element.getValue();

          ThriftResourceType __this__groupToResource_copy_value_copy_key = other_element_value_element_key;

          Integer __this__groupToResource_copy_value_copy_value = other_element_value_element_value;

          __this__groupToResource_copy_value.put(__this__groupToResource_copy_value_copy_key, __this__groupToResource_copy_value_copy_value);
        }

        __this__groupToResource.put(__this__groupToResource_copy_key, __this__groupToResource_copy_value);
      }
      this.groupToResource = __this__groupToResource;
    }
    if (other.is_set_groupToUsedResource()) {
      Map<String,Map<ThriftResourceType,Integer>> __this__groupToUsedResource = new HashMap<String,Map<ThriftResourceType,Integer>>();
      for (Map.Entry<String, Map<ThriftResourceType,Integer>> other_element : other.groupToUsedResource.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<ThriftResourceType,Integer> other_element_value = other_element.getValue();

        String __this__groupToUsedResource_copy_key = other_element_key;

        Map<ThriftResourceType,Integer> __this__groupToUsedResource_copy_value = new HashMap<ThriftResourceType,Integer>();
        for (Map.Entry<ThriftResourceType, Integer> other_element_value_element : other_element_value.entrySet()) {

          ThriftResourceType other_element_value_element_key = other_element_value_element.getKey();
          Integer other_element_value_element_value = other_element_value_element.getValue();

          ThriftResourceType __this__groupToUsedResource_copy_value_copy_key = other_element_value_element_key;

          Integer __this__groupToUsedResource_copy_value_copy_value = other_element_value_element_value;

          __this__groupToUsedResource_copy_value.put(__this__groupToUsedResource_copy_value_copy_key, __this__groupToUsedResource_copy_value_copy_value);
        }

        __this__groupToUsedResource.put(__this__groupToUsedResource_copy_key, __this__groupToUsedResource_copy_value);
      }
      this.groupToUsedResource = __this__groupToUsedResource;
    }
    this.isGroupModel = other.isGroupModel;
  }

  public ClusterSummary deepCopy() {
    return new ClusterSummary(this);
  }

  @Override
  public void clear() {
    this.supervisors = null;
    set_nimbus_uptime_secs_isSet(false);
    this.nimbus_uptime_secs = 0;
    this.topologies = null;
    this.groupToTopology = null;
    this.groupToResource = null;
    this.groupToUsedResource = null;
    set_isGroupModel_isSet(false);
    this.isGroupModel = false;
  }

  public int get_supervisors_size() {
    return (this.supervisors == null) ? 0 : this.supervisors.size();
  }

  public java.util.Iterator<SupervisorSummary> get_supervisors_iterator() {
    return (this.supervisors == null) ? null : this.supervisors.iterator();
  }

  public void add_to_supervisors(SupervisorSummary elem) {
    if (this.supervisors == null) {
      this.supervisors = new ArrayList<SupervisorSummary>();
    }
    this.supervisors.add(elem);
  }

  public List<SupervisorSummary> get_supervisors() {
    return this.supervisors;
  }

  public void set_supervisors(List<SupervisorSummary> supervisors) {
    this.supervisors = supervisors;
  }

  public void unset_supervisors() {
    this.supervisors = null;
  }

  /** Returns true if field supervisors is set (has been assigned a value) and false otherwise */
  public boolean is_set_supervisors() {
    return this.supervisors != null;
  }

  public void set_supervisors_isSet(boolean value) {
    if (!value) {
      this.supervisors = null;
    }
  }

  public int get_nimbus_uptime_secs() {
    return this.nimbus_uptime_secs;
  }

  public void set_nimbus_uptime_secs(int nimbus_uptime_secs) {
    this.nimbus_uptime_secs = nimbus_uptime_secs;
    set_nimbus_uptime_secs_isSet(true);
  }

  public void unset_nimbus_uptime_secs() {
    __isset_bit_vector.clear(__NIMBUS_UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field nimbus_uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean is_set_nimbus_uptime_secs() {
    return __isset_bit_vector.get(__NIMBUS_UPTIME_SECS_ISSET_ID);
  }

  public void set_nimbus_uptime_secs_isSet(boolean value) {
    __isset_bit_vector.set(__NIMBUS_UPTIME_SECS_ISSET_ID, value);
  }

  public int get_topologies_size() {
    return (this.topologies == null) ? 0 : this.topologies.size();
  }

  public java.util.Iterator<TopologySummary> get_topologies_iterator() {
    return (this.topologies == null) ? null : this.topologies.iterator();
  }

  public void add_to_topologies(TopologySummary elem) {
    if (this.topologies == null) {
      this.topologies = new ArrayList<TopologySummary>();
    }
    this.topologies.add(elem);
  }

  public List<TopologySummary> get_topologies() {
    return this.topologies;
  }

  public void set_topologies(List<TopologySummary> topologies) {
    this.topologies = topologies;
  }

  public void unset_topologies() {
    this.topologies = null;
  }

  /** Returns true if field topologies is set (has been assigned a value) and false otherwise */
  public boolean is_set_topologies() {
    return this.topologies != null;
  }

  public void set_topologies_isSet(boolean value) {
    if (!value) {
      this.topologies = null;
    }
  }

  public int get_groupToTopology_size() {
    return (this.groupToTopology == null) ? 0 : this.groupToTopology.size();
  }

  public void put_to_groupToTopology(String key, Map<String,Map<ThriftResourceType,Integer>> val) {
    if (this.groupToTopology == null) {
      this.groupToTopology = new HashMap<String,Map<String,Map<ThriftResourceType,Integer>>>();
    }
    this.groupToTopology.put(key, val);
  }

  public Map<String,Map<String,Map<ThriftResourceType,Integer>>> get_groupToTopology() {
    return this.groupToTopology;
  }

  public void set_groupToTopology(Map<String,Map<String,Map<ThriftResourceType,Integer>>> groupToTopology) {
    this.groupToTopology = groupToTopology;
  }

  public void unset_groupToTopology() {
    this.groupToTopology = null;
  }

  /** Returns true if field groupToTopology is set (has been assigned a value) and false otherwise */
  public boolean is_set_groupToTopology() {
    return this.groupToTopology != null;
  }

  public void set_groupToTopology_isSet(boolean value) {
    if (!value) {
      this.groupToTopology = null;
    }
  }

  public int get_groupToResource_size() {
    return (this.groupToResource == null) ? 0 : this.groupToResource.size();
  }

  public void put_to_groupToResource(String key, Map<ThriftResourceType,Integer> val) {
    if (this.groupToResource == null) {
      this.groupToResource = new HashMap<String,Map<ThriftResourceType,Integer>>();
    }
    this.groupToResource.put(key, val);
  }

  public Map<String,Map<ThriftResourceType,Integer>> get_groupToResource() {
    return this.groupToResource;
  }

  public void set_groupToResource(Map<String,Map<ThriftResourceType,Integer>> groupToResource) {
    this.groupToResource = groupToResource;
  }

  public void unset_groupToResource() {
    this.groupToResource = null;
  }

  /** Returns true if field groupToResource is set (has been assigned a value) and false otherwise */
  public boolean is_set_groupToResource() {
    return this.groupToResource != null;
  }

  public void set_groupToResource_isSet(boolean value) {
    if (!value) {
      this.groupToResource = null;
    }
  }

  public int get_groupToUsedResource_size() {
    return (this.groupToUsedResource == null) ? 0 : this.groupToUsedResource.size();
  }

  public void put_to_groupToUsedResource(String key, Map<ThriftResourceType,Integer> val) {
    if (this.groupToUsedResource == null) {
      this.groupToUsedResource = new HashMap<String,Map<ThriftResourceType,Integer>>();
    }
    this.groupToUsedResource.put(key, val);
  }

  public Map<String,Map<ThriftResourceType,Integer>> get_groupToUsedResource() {
    return this.groupToUsedResource;
  }

  public void set_groupToUsedResource(Map<String,Map<ThriftResourceType,Integer>> groupToUsedResource) {
    this.groupToUsedResource = groupToUsedResource;
  }

  public void unset_groupToUsedResource() {
    this.groupToUsedResource = null;
  }

  /** Returns true if field groupToUsedResource is set (has been assigned a value) and false otherwise */
  public boolean is_set_groupToUsedResource() {
    return this.groupToUsedResource != null;
  }

  public void set_groupToUsedResource_isSet(boolean value) {
    if (!value) {
      this.groupToUsedResource = null;
    }
  }

  public boolean is_isGroupModel() {
    return this.isGroupModel;
  }

  public void set_isGroupModel(boolean isGroupModel) {
    this.isGroupModel = isGroupModel;
    set_isGroupModel_isSet(true);
  }

  public void unset_isGroupModel() {
    __isset_bit_vector.clear(__ISGROUPMODEL_ISSET_ID);
  }

  /** Returns true if field isGroupModel is set (has been assigned a value) and false otherwise */
  public boolean is_set_isGroupModel() {
    return __isset_bit_vector.get(__ISGROUPMODEL_ISSET_ID);
  }

  public void set_isGroupModel_isSet(boolean value) {
    __isset_bit_vector.set(__ISGROUPMODEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUPERVISORS:
      if (value == null) {
        unset_supervisors();
      } else {
        set_supervisors((List<SupervisorSummary>)value);
      }
      break;

    case NIMBUS_UPTIME_SECS:
      if (value == null) {
        unset_nimbus_uptime_secs();
      } else {
        set_nimbus_uptime_secs((Integer)value);
      }
      break;

    case TOPOLOGIES:
      if (value == null) {
        unset_topologies();
      } else {
        set_topologies((List<TopologySummary>)value);
      }
      break;

    case GROUP_TO_TOPOLOGY:
      if (value == null) {
        unset_groupToTopology();
      } else {
        set_groupToTopology((Map<String,Map<String,Map<ThriftResourceType,Integer>>>)value);
      }
      break;

    case GROUP_TO_RESOURCE:
      if (value == null) {
        unset_groupToResource();
      } else {
        set_groupToResource((Map<String,Map<ThriftResourceType,Integer>>)value);
      }
      break;

    case GROUP_TO_USED_RESOURCE:
      if (value == null) {
        unset_groupToUsedResource();
      } else {
        set_groupToUsedResource((Map<String,Map<ThriftResourceType,Integer>>)value);
      }
      break;

    case IS_GROUP_MODEL:
      if (value == null) {
        unset_isGroupModel();
      } else {
        set_isGroupModel((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUPERVISORS:
      return get_supervisors();

    case NIMBUS_UPTIME_SECS:
      return Integer.valueOf(get_nimbus_uptime_secs());

    case TOPOLOGIES:
      return get_topologies();

    case GROUP_TO_TOPOLOGY:
      return get_groupToTopology();

    case GROUP_TO_RESOURCE:
      return get_groupToResource();

    case GROUP_TO_USED_RESOURCE:
      return get_groupToUsedResource();

    case IS_GROUP_MODEL:
      return Boolean.valueOf(is_isGroupModel());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUPERVISORS:
      return is_set_supervisors();
    case NIMBUS_UPTIME_SECS:
      return is_set_nimbus_uptime_secs();
    case TOPOLOGIES:
      return is_set_topologies();
    case GROUP_TO_TOPOLOGY:
      return is_set_groupToTopology();
    case GROUP_TO_RESOURCE:
      return is_set_groupToResource();
    case GROUP_TO_USED_RESOURCE:
      return is_set_groupToUsedResource();
    case IS_GROUP_MODEL:
      return is_set_isGroupModel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClusterSummary)
      return this.equals((ClusterSummary)that);
    return false;
  }

  public boolean equals(ClusterSummary that) {
    if (that == null)
      return false;

    boolean this_present_supervisors = true && this.is_set_supervisors();
    boolean that_present_supervisors = true && that.is_set_supervisors();
    if (this_present_supervisors || that_present_supervisors) {
      if (!(this_present_supervisors && that_present_supervisors))
        return false;
      if (!this.supervisors.equals(that.supervisors))
        return false;
    }

    boolean this_present_nimbus_uptime_secs = true;
    boolean that_present_nimbus_uptime_secs = true;
    if (this_present_nimbus_uptime_secs || that_present_nimbus_uptime_secs) {
      if (!(this_present_nimbus_uptime_secs && that_present_nimbus_uptime_secs))
        return false;
      if (this.nimbus_uptime_secs != that.nimbus_uptime_secs)
        return false;
    }

    boolean this_present_topologies = true && this.is_set_topologies();
    boolean that_present_topologies = true && that.is_set_topologies();
    if (this_present_topologies || that_present_topologies) {
      if (!(this_present_topologies && that_present_topologies))
        return false;
      if (!this.topologies.equals(that.topologies))
        return false;
    }

    boolean this_present_groupToTopology = true && this.is_set_groupToTopology();
    boolean that_present_groupToTopology = true && that.is_set_groupToTopology();
    if (this_present_groupToTopology || that_present_groupToTopology) {
      if (!(this_present_groupToTopology && that_present_groupToTopology))
        return false;
      if (!this.groupToTopology.equals(that.groupToTopology))
        return false;
    }

    boolean this_present_groupToResource = true && this.is_set_groupToResource();
    boolean that_present_groupToResource = true && that.is_set_groupToResource();
    if (this_present_groupToResource || that_present_groupToResource) {
      if (!(this_present_groupToResource && that_present_groupToResource))
        return false;
      if (!this.groupToResource.equals(that.groupToResource))
        return false;
    }

    boolean this_present_groupToUsedResource = true && this.is_set_groupToUsedResource();
    boolean that_present_groupToUsedResource = true && that.is_set_groupToUsedResource();
    if (this_present_groupToUsedResource || that_present_groupToUsedResource) {
      if (!(this_present_groupToUsedResource && that_present_groupToUsedResource))
        return false;
      if (!this.groupToUsedResource.equals(that.groupToUsedResource))
        return false;
    }

    boolean this_present_isGroupModel = true;
    boolean that_present_isGroupModel = true;
    if (this_present_isGroupModel || that_present_isGroupModel) {
      if (!(this_present_isGroupModel && that_present_isGroupModel))
        return false;
      if (this.isGroupModel != that.isGroupModel)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_supervisors = true && (is_set_supervisors());
    builder.append(present_supervisors);
    if (present_supervisors)
      builder.append(supervisors);

    boolean present_nimbus_uptime_secs = true;
    builder.append(present_nimbus_uptime_secs);
    if (present_nimbus_uptime_secs)
      builder.append(nimbus_uptime_secs);

    boolean present_topologies = true && (is_set_topologies());
    builder.append(present_topologies);
    if (present_topologies)
      builder.append(topologies);

    boolean present_groupToTopology = true && (is_set_groupToTopology());
    builder.append(present_groupToTopology);
    if (present_groupToTopology)
      builder.append(groupToTopology);

    boolean present_groupToResource = true && (is_set_groupToResource());
    builder.append(present_groupToResource);
    if (present_groupToResource)
      builder.append(groupToResource);

    boolean present_groupToUsedResource = true && (is_set_groupToUsedResource());
    builder.append(present_groupToUsedResource);
    if (present_groupToUsedResource)
      builder.append(groupToUsedResource);

    boolean present_isGroupModel = true;
    builder.append(present_isGroupModel);
    if (present_isGroupModel)
      builder.append(isGroupModel);

    return builder.toHashCode();
  }

  public int compareTo(ClusterSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ClusterSummary typedOther = (ClusterSummary)other;

    lastComparison = Boolean.valueOf(is_set_supervisors()).compareTo(typedOther.is_set_supervisors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_supervisors()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.supervisors, typedOther.supervisors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_nimbus_uptime_secs()).compareTo(typedOther.is_set_nimbus_uptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_nimbus_uptime_secs()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.nimbus_uptime_secs, typedOther.nimbus_uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topologies()).compareTo(typedOther.is_set_topologies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topologies()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.topologies, typedOther.topologies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_groupToTopology()).compareTo(typedOther.is_set_groupToTopology());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_groupToTopology()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.groupToTopology, typedOther.groupToTopology);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_groupToResource()).compareTo(typedOther.is_set_groupToResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_groupToResource()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.groupToResource, typedOther.groupToResource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_groupToUsedResource()).compareTo(typedOther.is_set_groupToUsedResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_groupToUsedResource()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.groupToUsedResource, typedOther.groupToUsedResource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_isGroupModel()).compareTo(typedOther.is_set_isGroupModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_isGroupModel()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.isGroupModel, typedOther.isGroupModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
    org.apache.thrift7.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift7.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SUPERVISORS
          if (field.type == org.apache.thrift7.protocol.TType.LIST) {
            {
              org.apache.thrift7.protocol.TList _list37 = iprot.readListBegin();
              this.supervisors = new ArrayList<SupervisorSummary>(_list37.size);
              for (int _i38 = 0; _i38 < _list37.size; ++_i38)
              {
                SupervisorSummary _elem39; // required
                _elem39 = new SupervisorSummary();
                _elem39.read(iprot);
                this.supervisors.add(_elem39);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NIMBUS_UPTIME_SECS
          if (field.type == org.apache.thrift7.protocol.TType.I32) {
            this.nimbus_uptime_secs = iprot.readI32();
            set_nimbus_uptime_secs_isSet(true);
          } else { 
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TOPOLOGIES
          if (field.type == org.apache.thrift7.protocol.TType.LIST) {
            {
              org.apache.thrift7.protocol.TList _list40 = iprot.readListBegin();
              this.topologies = new ArrayList<TopologySummary>(_list40.size);
              for (int _i41 = 0; _i41 < _list40.size; ++_i41)
              {
                TopologySummary _elem42; // required
                _elem42 = new TopologySummary();
                _elem42.read(iprot);
                this.topologies.add(_elem42);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // GROUP_TO_TOPOLOGY
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map43 = iprot.readMapBegin();
              this.groupToTopology = new HashMap<String,Map<String,Map<ThriftResourceType,Integer>>>(2*_map43.size);
              for (int _i44 = 0; _i44 < _map43.size; ++_i44)
              {
                String _key45; // required
                Map<String,Map<ThriftResourceType,Integer>> _val46; // required
                _key45 = iprot.readString();
                {
                  org.apache.thrift7.protocol.TMap _map47 = iprot.readMapBegin();
                  _val46 = new HashMap<String,Map<ThriftResourceType,Integer>>(2*_map47.size);
                  for (int _i48 = 0; _i48 < _map47.size; ++_i48)
                  {
                    String _key49; // required
                    Map<ThriftResourceType,Integer> _val50; // required
                    _key49 = iprot.readString();
                    {
                      org.apache.thrift7.protocol.TMap _map51 = iprot.readMapBegin();
                      _val50 = new HashMap<ThriftResourceType,Integer>(2*_map51.size);
                      for (int _i52 = 0; _i52 < _map51.size; ++_i52)
                      {
                        ThriftResourceType _key53; // required
                        int _val54; // required
                        _key53 = ThriftResourceType.findByValue(iprot.readI32());
                        _val54 = iprot.readI32();
                        _val50.put(_key53, _val54);
                      }
                      iprot.readMapEnd();
                    }
                    _val46.put(_key49, _val50);
                  }
                  iprot.readMapEnd();
                }
                this.groupToTopology.put(_key45, _val46);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // GROUP_TO_RESOURCE
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map55 = iprot.readMapBegin();
              this.groupToResource = new HashMap<String,Map<ThriftResourceType,Integer>>(2*_map55.size);
              for (int _i56 = 0; _i56 < _map55.size; ++_i56)
              {
                String _key57; // required
                Map<ThriftResourceType,Integer> _val58; // required
                _key57 = iprot.readString();
                {
                  org.apache.thrift7.protocol.TMap _map59 = iprot.readMapBegin();
                  _val58 = new HashMap<ThriftResourceType,Integer>(2*_map59.size);
                  for (int _i60 = 0; _i60 < _map59.size; ++_i60)
                  {
                    ThriftResourceType _key61; // required
                    int _val62; // required
                    _key61 = ThriftResourceType.findByValue(iprot.readI32());
                    _val62 = iprot.readI32();
                    _val58.put(_key61, _val62);
                  }
                  iprot.readMapEnd();
                }
                this.groupToResource.put(_key57, _val58);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // GROUP_TO_USED_RESOURCE
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map63 = iprot.readMapBegin();
              this.groupToUsedResource = new HashMap<String,Map<ThriftResourceType,Integer>>(2*_map63.size);
              for (int _i64 = 0; _i64 < _map63.size; ++_i64)
              {
                String _key65; // required
                Map<ThriftResourceType,Integer> _val66; // required
                _key65 = iprot.readString();
                {
                  org.apache.thrift7.protocol.TMap _map67 = iprot.readMapBegin();
                  _val66 = new HashMap<ThriftResourceType,Integer>(2*_map67.size);
                  for (int _i68 = 0; _i68 < _map67.size; ++_i68)
                  {
                    ThriftResourceType _key69; // required
                    int _val70; // required
                    _key69 = ThriftResourceType.findByValue(iprot.readI32());
                    _val70 = iprot.readI32();
                    _val66.put(_key69, _val70);
                  }
                  iprot.readMapEnd();
                }
                this.groupToUsedResource.put(_key65, _val66);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // IS_GROUP_MODEL
          if (field.type == org.apache.thrift7.protocol.TType.BOOL) {
            this.isGroupModel = iprot.readBool();
            set_isGroupModel_isSet(true);
          } else { 
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.supervisors != null) {
      oprot.writeFieldBegin(SUPERVISORS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.supervisors.size()));
        for (SupervisorSummary _iter71 : this.supervisors)
        {
          _iter71.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NIMBUS_UPTIME_SECS_FIELD_DESC);
    oprot.writeI32(this.nimbus_uptime_secs);
    oprot.writeFieldEnd();
    if (this.topologies != null) {
      oprot.writeFieldBegin(TOPOLOGIES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift7.protocol.TList(org.apache.thrift7.protocol.TType.STRUCT, this.topologies.size()));
        for (TopologySummary _iter72 : this.topologies)
        {
          _iter72.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.groupToTopology != null) {
      oprot.writeFieldBegin(GROUP_TO_TOPOLOGY_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.MAP, this.groupToTopology.size()));
        for (Map.Entry<String, Map<String,Map<ThriftResourceType,Integer>>> _iter73 : this.groupToTopology.entrySet())
        {
          oprot.writeString(_iter73.getKey());
          {
            oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.MAP, _iter73.getValue().size()));
            for (Map.Entry<String, Map<ThriftResourceType,Integer>> _iter74 : _iter73.getValue().entrySet())
            {
              oprot.writeString(_iter74.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.I32, org.apache.thrift7.protocol.TType.I32, _iter74.getValue().size()));
                for (Map.Entry<ThriftResourceType, Integer> _iter75 : _iter74.getValue().entrySet())
                {
                  oprot.writeI32(_iter75.getKey().getValue());
                  oprot.writeI32(_iter75.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.groupToResource != null) {
      oprot.writeFieldBegin(GROUP_TO_RESOURCE_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.MAP, this.groupToResource.size()));
        for (Map.Entry<String, Map<ThriftResourceType,Integer>> _iter76 : this.groupToResource.entrySet())
        {
          oprot.writeString(_iter76.getKey());
          {
            oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.I32, org.apache.thrift7.protocol.TType.I32, _iter76.getValue().size()));
            for (Map.Entry<ThriftResourceType, Integer> _iter77 : _iter76.getValue().entrySet())
            {
              oprot.writeI32(_iter77.getKey().getValue());
              oprot.writeI32(_iter77.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.groupToUsedResource != null) {
      oprot.writeFieldBegin(GROUP_TO_USED_RESOURCE_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.MAP, this.groupToUsedResource.size()));
        for (Map.Entry<String, Map<ThriftResourceType,Integer>> _iter78 : this.groupToUsedResource.entrySet())
        {
          oprot.writeString(_iter78.getKey());
          {
            oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.I32, org.apache.thrift7.protocol.TType.I32, _iter78.getValue().size()));
            for (Map.Entry<ThriftResourceType, Integer> _iter79 : _iter78.getValue().entrySet())
            {
              oprot.writeI32(_iter79.getKey().getValue());
              oprot.writeI32(_iter79.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_GROUP_MODEL_FIELD_DESC);
    oprot.writeBool(this.isGroupModel);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClusterSummary(");
    boolean first = true;

    sb.append("supervisors:");
    if (this.supervisors == null) {
      sb.append("null");
    } else {
      sb.append(this.supervisors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nimbus_uptime_secs:");
    sb.append(this.nimbus_uptime_secs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topologies:");
    if (this.topologies == null) {
      sb.append("null");
    } else {
      sb.append(this.topologies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupToTopology:");
    if (this.groupToTopology == null) {
      sb.append("null");
    } else {
      sb.append(this.groupToTopology);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupToResource:");
    if (this.groupToResource == null) {
      sb.append("null");
    } else {
      sb.append(this.groupToResource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupToUsedResource:");
    if (this.groupToUsedResource == null) {
      sb.append("null");
    } else {
      sb.append(this.groupToUsedResource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGroupModel:");
    sb.append(this.isGroupModel);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift7.TException {
    // check for required fields
    if (!is_set_supervisors()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'supervisors' is unset! Struct:" + toString());
    }

    if (!is_set_nimbus_uptime_secs()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'nimbus_uptime_secs' is unset! Struct:" + toString());
    }

    if (!is_set_topologies()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'topologies' is unset! Struct:" + toString());
    }

    if (!is_set_groupToTopology()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'groupToTopology' is unset! Struct:" + toString());
    }

    if (!is_set_groupToResource()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'groupToResource' is unset! Struct:" + toString());
    }

    if (!is_set_groupToUsedResource()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'groupToUsedResource' is unset! Struct:" + toString());
    }

    if (!is_set_isGroupModel()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'isGroupModel' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift7.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift7.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

